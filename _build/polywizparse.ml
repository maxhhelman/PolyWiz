type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | LBRACK
  | RBRACK
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | DEF
  | STRING
  | EXP
  | ABS
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "polywizparse.mly"
open Ast
# 49 "polywizparse.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* AND *);
  276 (* OR *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INT *);
  285 (* BOOL *);
  286 (* FLOAT *);
  287 (* VOID *);
  288 (* DEF *);
  289 (* STRING *);
  290 (* EXP *);
  291 (* ABS *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  292 (* LITERAL *);
  293 (* BLIT *);
  294 (* ID *);
  295 (* FLIT *);
  296 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\007\000\
\007\000\003\000\008\000\008\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\012\000\012\000\013\000\013\000\014\000\
\014\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\015\000\015\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\003\000\000\000\
\002\000\003\000\000\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\000\000\001\000\000\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\004\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\063\000\000\000\010\000\011\000\012\000\013\000\
\000\000\014\000\001\000\003\000\004\000\000\000\000\000\000\000\
\000\000\000\000\015\000\018\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\016\000\000\000\000\000\009\000\017\000\
\000\000\000\000\019\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\034\000\036\000\000\000\035\000\
\037\000\020\000\000\000\000\000\000\000\054\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\023\000\039\000\000\000\022\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\027\000\000\000\000\000\000\000\025\000\000\000\
\000\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\012\000\013\000\014\000\023\000\030\000\033\000\
\024\000\050\000\051\000\060\000\057\000\058\000\091\000\092\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\087\255\000\000\000\000\000\000\000\000\248\254\032\255\250\254\
\025\255\049\255\000\000\000\000\087\255\034\255\051\255\056\255\
\000\000\053\255\087\255\000\000\035\255\087\255\000\000\000\000\
\059\255\223\255\000\000\000\000\223\255\223\255\223\255\223\255\
\067\255\085\255\086\255\223\255\000\000\000\000\009\255\000\000\
\000\000\000\000\238\000\026\001\098\255\000\000\000\000\115\001\
\069\255\083\255\115\001\092\255\223\255\223\255\223\255\092\001\
\223\255\223\255\000\000\223\255\223\255\223\255\223\255\223\255\
\223\255\223\255\223\255\223\255\223\255\223\255\223\255\223\255\
\000\000\000\000\000\000\223\255\000\000\048\001\100\255\070\001\
\000\000\115\001\101\255\099\255\115\001\255\254\255\254\073\255\
\073\255\157\001\157\001\014\255\014\255\014\255\014\255\143\001\
\129\001\000\000\115\001\183\255\223\255\183\255\000\000\223\255\
\088\255\004\001\000\000\115\001\183\255\223\255\000\000\105\255\
\183\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\109\255\000\000\000\000\120\255\
\000\000\000\000\000\000\000\000\000\000\137\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\255\128\255\
\000\000\000\000\000\000\000\000\000\000\000\000\233\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\255\
\000\000\110\255\076\255\000\000\000\000\128\255\000\000\000\000\
\141\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\011\255\000\000\143\255\195\255\080\000\103\000\034\000\
\057\000\046\255\215\000\126\000\149\000\172\000\195\000\108\255\
\147\255\000\000\070\255\000\000\000\000\000\000\000\000\000\000\
\176\255\000\000\000\000\012\255\000\000\144\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\101\000\000\000\254\255\000\000\000\000\105\000\
\000\000\049\000\222\255\196\255\000\000\000\000\000\000\000\000"

let yytablesize = 703
let yytable = "\052\000\
\011\000\087\000\054\000\055\000\056\000\059\000\015\000\070\000\
\071\000\064\000\065\000\001\000\016\000\061\000\062\000\019\000\
\061\000\062\000\022\000\066\000\068\000\069\000\070\000\071\000\
\029\000\020\000\086\000\059\000\088\000\017\000\090\000\093\000\
\080\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\045\000\080\000\
\045\000\107\000\021\000\045\000\016\000\026\000\016\000\016\000\
\028\000\120\000\045\000\045\000\034\000\027\000\035\000\036\000\
\045\000\045\000\037\000\045\000\061\000\018\000\038\000\025\000\
\031\000\032\000\114\000\033\000\029\000\116\000\029\000\039\000\
\045\000\040\000\041\000\059\000\042\000\043\000\062\000\063\000\
\084\000\032\000\083\000\033\000\085\000\044\000\045\000\046\000\
\047\000\048\000\049\000\034\000\109\000\035\000\082\000\111\000\
\112\000\037\000\080\000\121\000\051\000\038\000\051\000\006\000\
\117\000\051\000\005\000\006\000\007\000\008\000\039\000\010\000\
\040\000\041\000\007\000\042\000\043\000\030\000\051\000\051\000\
\028\000\051\000\032\000\031\000\044\000\045\000\046\000\047\000\
\048\000\049\000\019\000\053\000\019\000\019\000\051\000\059\000\
\019\000\060\000\028\000\052\000\019\000\052\000\000\000\000\000\
\052\000\000\000\000\000\000\000\113\000\019\000\115\000\019\000\
\019\000\000\000\019\000\019\000\000\000\119\000\052\000\000\000\
\052\000\122\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\024\000\000\000\024\000\024\000\052\000\000\000\024\000\
\034\000\000\000\035\000\024\000\000\000\000\000\037\000\000\000\
\000\000\000\000\038\000\056\000\024\000\056\000\024\000\024\000\
\056\000\024\000\024\000\039\000\000\000\040\000\041\000\000\000\
\042\000\043\000\024\000\024\000\024\000\024\000\024\000\024\000\
\056\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\034\000\000\000\000\000\000\000\000\000\056\000\037\000\000\000\
\000\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\039\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\038\000\000\000\
\000\000\044\000\045\000\046\000\047\000\048\000\049\000\000\000\
\000\000\000\000\038\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\006\000\007\000\008\000\
\009\000\010\000\042\000\000\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\000\000\043\000\000\000\043\000\000\000\000\000\043\000\043\000\
\043\000\043\000\043\000\000\000\042\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\043\000\000\000\
\040\000\000\000\040\000\000\000\000\000\040\000\040\000\040\000\
\000\000\000\000\000\000\043\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\000\000\041\000\
\000\000\041\000\000\000\000\000\041\000\041\000\041\000\000\000\
\000\000\000\000\040\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\041\000\000\000\047\000\000\000\
\047\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\041\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\047\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\047\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\048\000\000\000\049\000\000\000\049\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\048\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\049\000\000\000\050\000\000\000\050\000\000\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\046\000\
\050\000\046\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\050\000\000\000\000\000\
\000\000\046\000\046\000\000\000\046\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\068\000\069\000\070\000\071\000\
\000\000\046\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\118\000\000\000\000\000\000\000\
\000\000\000\000\068\000\069\000\070\000\071\000\000\000\080\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\000\000\000\000\000\000\000\000\081\000\000\000\000\000\000\000\
\068\000\069\000\070\000\071\000\000\000\080\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\000\000\000\000\
\000\000\000\000\108\000\000\000\000\000\000\000\068\000\069\000\
\070\000\071\000\000\000\080\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\000\000\000\000\000\000\000\000\
\110\000\000\000\000\000\000\000\068\000\069\000\070\000\071\000\
\000\000\080\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\069\000\070\000\071\000\000\000\080\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\069\000\070\000\071\000\080\000\089\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\068\000\
\069\000\070\000\071\000\000\000\000\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\080\000\068\000\069\000\070\000\
\071\000\000\000\000\000\072\000\073\000\074\000\075\000\076\000\
\077\000\000\000\080\000\068\000\069\000\070\000\071\000\000\000\
\000\000\000\000\000\000\074\000\075\000\076\000\077\000\000\000\
\080\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\000"

let yycheck = "\034\000\
\000\000\062\000\037\000\038\000\039\000\040\000\009\000\009\001\
\010\001\044\000\002\001\001\000\021\001\003\001\003\001\022\001\
\006\001\006\001\021\000\011\001\007\001\008\001\009\001\010\001\
\027\000\001\001\061\000\062\000\063\000\038\001\065\000\066\000\
\034\001\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\001\001\034\001\
\003\001\084\000\002\001\006\001\021\001\003\001\021\001\021\001\
\004\001\118\000\013\001\014\001\002\001\006\001\004\001\005\001\
\019\001\020\001\008\001\022\001\002\001\038\001\012\001\038\001\
\038\001\006\001\109\000\006\001\001\001\112\000\003\001\021\001\
\035\001\023\001\024\001\118\000\026\001\027\001\002\001\002\001\
\006\001\022\001\022\001\022\001\001\001\035\001\036\001\037\001\
\038\001\039\001\040\001\002\001\001\001\004\001\005\001\003\001\
\006\001\008\001\034\001\003\001\001\001\012\001\003\001\003\001\
\025\001\006\001\028\001\029\001\030\001\031\001\021\001\033\001\
\023\001\024\001\003\001\026\001\027\001\022\001\019\001\020\001\
\001\001\022\001\030\000\022\001\035\001\036\001\037\001\038\001\
\039\001\040\001\002\001\035\000\004\001\005\001\035\001\003\001\
\008\001\003\001\003\001\001\001\012\001\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\108\000\021\001\110\000\023\001\
\024\001\255\255\026\001\027\001\255\255\117\000\020\001\255\255\
\022\001\121\000\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\002\001\255\255\004\001\005\001\035\001\255\255\008\001\
\002\001\255\255\004\001\012\001\255\255\255\255\008\001\255\255\
\255\255\255\255\012\001\001\001\021\001\003\001\023\001\024\001\
\006\001\026\001\027\001\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\035\001\036\001\037\001\038\001\039\001\040\001\
\022\001\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\002\001\255\255\255\255\255\255\255\255\035\001\008\001\255\255\
\255\255\001\001\012\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\021\001\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\255\255\
\255\255\255\255\034\001\035\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\255\255\035\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\008\001\
\255\255\255\255\255\255\035\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\008\001\255\255\
\255\255\255\255\035\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\035\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\035\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\255\255\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\035\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\255\255\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\035\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\001\001\
\022\001\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\035\001\255\255\255\255\
\255\255\019\001\020\001\255\255\022\001\255\255\001\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\035\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\034\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\034\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\003\001\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\255\255\034\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\255\255\
\003\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\034\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\034\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\034\001\035\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\034\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\034\001\007\001\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  LBRACK\000\
  RBRACK\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  DEF\000\
  STRING\000\
  EXP\000\
  ABS\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 42 "polywizparse.mly"
            ( _1 )
# 414 "polywizparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "polywizparse.mly"
                 ( ([], [])               )
# 420 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 46 "polywizparse.mly"
               ( ((_2 :: fst _1), snd _1) )
# 428 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 47 "polywizparse.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 436 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "polywizparse.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = List.rev _5;
   locals = List.rev _8;
	 body = List.rev _9 } )
# 451 "polywizparse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "polywizparse.mly"
                  ( [] )
# 457 "polywizparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 59 "polywizparse.mly"
                  ( _1 )
# 464 "polywizparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "polywizparse.mly"
                             ( [(_1,_2)]     )
# 472 "polywizparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "polywizparse.mly"
                             ( (_3,_4) :: _1 )
# 481 "polywizparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "polywizparse.mly"
          ( Int   )
# 487 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "polywizparse.mly"
          ( Bool  )
# 493 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "polywizparse.mly"
          ( Float )
# 499 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "polywizparse.mly"
          ( Void  )
# 505 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "polywizparse.mly"
           ( String )
# 511 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 71 "polywizparse.mly"
                      ( Array(_1) )
# 518 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "polywizparse.mly"
                     ( [] )
# 524 "polywizparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 75 "polywizparse.mly"
                     ( _2 :: _1 )
# 532 "polywizparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 78 "polywizparse.mly"
               ( (_1, _2) )
# 540 "polywizparse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "polywizparse.mly"
                   ( [] )
# 546 "polywizparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 82 "polywizparse.mly"
                   ( _2 :: _1 )
# 554 "polywizparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 85 "polywizparse.mly"
                                            ( Expr _1               )
# 561 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 86 "polywizparse.mly"
                                            ( Return _2             )
# 568 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 87 "polywizparse.mly"
                                            ( Block(List.rev _2)    )
# 575 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "polywizparse.mly"
                                            ( If(_3, _5, Block([])) )
# 583 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "polywizparse.mly"
                                            ( If(_3, _5, _7)        )
# 592 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "polywizparse.mly"
                                            ( For(_3, _5, _7, _9)   )
# 602 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "polywizparse.mly"
                                            ( While(_3, _5)         )
# 610 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "polywizparse.mly"
                  ( Noexpr )
# 616 "polywizparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "polywizparse.mly"
                  ( _1 )
# 623 "polywizparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "polywizparse.mly"
  ([])
# 629 "polywizparse.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elements_list) in
    Obj.repr(
# 100 "polywizparse.mly"
                  (List.rev _1)
# 636 "polywizparse.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "polywizparse.mly"
       ([_1])
# 643 "polywizparse.ml"
               : 'elements_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "polywizparse.mly"
                           (_3 :: _1 )
# 651 "polywizparse.ml"
               : 'elements_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 107 "polywizparse.mly"
                     ( Literal(_1)            )
# 658 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "polywizparse.mly"
              ( Fliteral(_1)           )
# 665 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 109 "polywizparse.mly"
                     ( BoolLit(_1)            )
# 672 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "polywizparse.mly"
                     ( Sliteral(_1)           )
# 679 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "polywizparse.mly"
                     ( Id(_1)                 )
# 686 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'element) in
    Obj.repr(
# 112 "polywizparse.mly"
                          ( ArrayLit(_2) )
# 693 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "polywizparse.mly"
                     ( Binop(_1, Add,   _3)   )
# 701 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "polywizparse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 709 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "polywizparse.mly"
                     ( Binop(_1, Mult,  _3)   )
# 717 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "polywizparse.mly"
                     ( Binop(_1, Div,   _3)   )
# 725 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "polywizparse.mly"
                  ( Binop(_1, Exp,   _3)   )
# 733 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "polywizparse.mly"
                     ( Binop(_1, Equal, _3)   )
# 741 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "polywizparse.mly"
                     ( Binop(_1, Neq,   _3)   )
# 749 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "polywizparse.mly"
                     ( Binop(_1, Less,  _3)   )
# 757 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "polywizparse.mly"
                     ( Binop(_1, Leq,   _3)   )
# 765 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "polywizparse.mly"
                     ( Binop(_1, Greater, _3) )
# 773 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "polywizparse.mly"
                     ( Binop(_1, Geq,   _3)   )
# 781 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "polywizparse.mly"
                     ( Binop(_1, And,   _3)   )
# 789 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "polywizparse.mly"
                     ( Binop(_1, Or,    _3)   )
# 797 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "polywizparse.mly"
                 ( Unop(Abs, _2)   )
# 804 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "polywizparse.mly"
                         ( Unop(Neg, _2)      )
# 811 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "polywizparse.mly"
                     ( Unop(Not, _2)          )
# 818 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "polywizparse.mly"
                     ( Assign(_1, _3)         )
# 826 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 130 "polywizparse.mly"
                              ( Call(_1, _3)  )
# 834 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "polywizparse.mly"
                       ( _2                   )
# 841 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "polywizparse.mly"
                  ( [] )
# 847 "polywizparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 135 "polywizparse.mly"
               ( List.rev _1 )
# 854 "polywizparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "polywizparse.mly"
                            ( [_1] )
# 861 "polywizparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "polywizparse.mly"
                         ( _3 :: _1 )
# 869 "polywizparse.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
