type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | LBRACK
  | RBRACK
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | DEF
  | STRING
  | POLY
  | EXP
  | ABS
  | COMPO
  | EVAL
  | CONST_RET
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "polywizparse.mly"
open Ast
# 53 "polywizparse.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* AND *);
  276 (* OR *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* INT *);
  285 (* BOOL *);
  286 (* FLOAT *);
  287 (* VOID *);
  288 (* DEF *);
  289 (* STRING *);
  290 (* POLY *);
  291 (* EXP *);
  292 (* ABS *);
  293 (* COMPO *);
  294 (* EVAL *);
  295 (* CONST_RET *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* LITERAL *);
  297 (* BLIT *);
  298 (* ID *);
  299 (* FLIT *);
  300 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\007\000\007\000\003\000\008\000\008\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\013\000\013\000\
\014\000\014\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\015\000\015\000\
\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\010\000\000\000\001\000\002\000\
\004\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\000\000\002\000\003\000\000\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\000\000\001\000\000\000\001\000\
\001\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\004\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\011\000\012\000\013\000\014\000\
\000\000\015\000\016\000\001\000\003\000\004\000\000\000\000\000\
\000\000\000\000\000\000\010\000\019\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\017\000\000\000\000\000\009\000\
\018\000\000\000\000\000\020\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\038\000\000\000\
\037\000\039\000\021\000\000\000\000\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\062\000\024\000\035\000\000\000\
\023\000\000\000\000\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000"

let yydgoto = "\002\000\
\003\000\004\000\013\000\014\000\015\000\024\000\031\000\034\000\
\025\000\051\000\052\000\061\000\058\000\059\000\095\000\096\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\210\255\000\000\000\000\000\000\000\000\000\000\244\254\247\254\
\249\254\022\255\023\255\000\000\000\000\210\255\028\255\058\255\
\059\255\000\000\060\255\210\255\000\000\030\255\210\255\000\000\
\000\000\050\255\067\255\000\000\000\000\067\255\067\255\067\255\
\067\255\065\255\066\255\076\255\067\255\000\000\000\000\011\255\
\000\000\000\000\000\000\035\000\101\000\093\255\000\000\000\000\
\234\001\062\255\075\255\234\001\081\255\067\255\067\255\067\255\
\220\001\067\255\067\255\000\000\067\255\067\255\067\255\067\255\
\067\255\067\255\067\255\067\255\067\255\067\255\067\255\067\255\
\067\255\067\255\067\255\000\000\000\000\000\000\000\000\067\255\
\000\000\134\000\084\255\167\000\000\000\234\001\096\255\090\255\
\234\001\167\255\167\255\235\254\235\254\057\002\057\002\087\000\
\087\000\087\000\087\000\024\002\011\002\162\255\000\000\063\255\
\234\001\171\255\067\255\171\255\000\000\067\255\077\255\068\000\
\000\000\234\001\171\255\067\255\000\000\101\255\171\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\103\255\000\000\000\000\
\109\255\000\000\000\000\000\000\000\000\000\000\119\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\255\
\086\255\000\000\000\000\000\000\000\000\000\000\000\000\215\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\255\000\000\108\255\018\255\000\000\000\000\086\255\000\000\
\000\000\115\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\255\000\000\122\255\
\057\000\022\001\046\001\230\000\254\000\162\001\166\001\070\001\
\094\001\118\001\142\001\186\001\190\001\206\000\000\000\002\000\
\044\255\000\000\000\000\000\000\000\000\000\000\145\255\000\000\
\000\000\054\255\000\000\129\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\107\000\000\000\254\255\000\000\000\000\103\000\
\000\000\255\255\221\255\195\255\000\000\000\000\000\000\000\000"

let yytablesize = 864
let yytable = "\053\000\
\012\000\091\000\055\000\056\000\057\000\060\000\016\000\033\000\
\017\000\065\000\001\000\017\000\066\000\081\000\020\000\082\000\
\083\000\084\000\030\000\023\000\030\000\067\000\021\000\033\000\
\022\000\030\000\090\000\060\000\092\000\018\000\094\000\097\000\
\019\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\017\000\034\000\017\000\035\000\113\000\036\000\037\000\065\000\
\066\000\038\000\065\000\066\000\027\000\039\000\126\000\029\000\
\028\000\034\000\062\000\063\000\035\000\026\000\040\000\032\000\
\041\000\042\000\038\000\043\000\044\000\064\000\039\000\120\000\
\088\000\089\000\122\000\087\000\115\000\045\000\029\000\040\000\
\060\000\046\000\047\000\048\000\049\000\050\000\035\000\118\000\
\036\000\086\000\117\000\082\000\038\000\123\000\045\000\127\000\
\039\000\006\000\046\000\047\000\048\000\049\000\050\000\007\000\
\119\000\040\000\121\000\041\000\042\000\063\000\043\000\044\000\
\020\000\125\000\020\000\020\000\064\000\128\000\020\000\031\000\
\045\000\032\000\020\000\029\000\046\000\047\000\048\000\049\000\
\050\000\033\000\054\000\020\000\000\000\020\000\020\000\000\000\
\020\000\020\000\025\000\000\000\025\000\025\000\000\000\000\000\
\025\000\000\000\020\000\000\000\025\000\000\000\020\000\020\000\
\020\000\020\000\020\000\000\000\000\000\025\000\000\000\025\000\
\025\000\000\000\025\000\025\000\035\000\000\000\036\000\071\000\
\072\000\000\000\038\000\000\000\025\000\000\000\039\000\000\000\
\025\000\025\000\025\000\025\000\025\000\000\000\000\000\040\000\
\000\000\041\000\042\000\000\000\043\000\044\000\082\000\083\000\
\084\000\081\000\000\000\082\000\083\000\084\000\045\000\000\000\
\000\000\000\000\046\000\047\000\048\000\049\000\050\000\040\000\
\000\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\040\000\005\000\006\000\007\000\
\008\000\000\000\010\000\011\000\000\000\000\000\000\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\048\000\000\000\048\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\
\000\000\000\000\000\000\000\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\068\000\048\000\048\000\000\000\048\000\
\048\000\069\000\070\000\071\000\072\000\000\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\060\000\000\000\060\000\000\000\000\000\060\000\000\000\
\000\000\000\000\000\000\000\000\124\000\081\000\000\000\082\000\
\083\000\084\000\069\000\070\000\071\000\072\000\060\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\000\000\000\000\060\000\069\000\070\000\071\000\
\072\000\000\000\000\000\000\000\000\000\000\000\081\000\085\000\
\082\000\083\000\084\000\069\000\070\000\071\000\072\000\000\000\
\000\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\000\000\082\000\083\000\084\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\081\000\
\114\000\082\000\083\000\084\000\069\000\070\000\071\000\072\000\
\000\000\000\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\081\000\116\000\082\000\083\000\084\000\069\000\070\000\071\000\
\072\000\000\000\000\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\081\000\000\000\082\000\083\000\084\000\045\000\000\000\
\045\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\045\000\000\000\000\000\043\000\000\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\045\000\045\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\043\000\000\000\000\000\044\000\000\000\
\044\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\000\000\043\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\044\000\000\000\000\000\041\000\000\000\
\041\000\000\000\000\000\041\000\041\000\041\000\000\000\000\000\
\000\000\044\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\041\000\000\000\000\000\042\000\000\000\
\042\000\000\000\000\000\042\000\042\000\042\000\000\000\000\000\
\000\000\041\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\000\000\000\000\051\000\000\000\
\051\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\042\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\051\000\000\000\000\000\052\000\000\000\
\052\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\
\000\000\051\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\052\000\000\000\000\000\053\000\000\000\
\053\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
\000\000\052\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\053\000\000\000\000\000\054\000\000\000\
\054\000\000\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\053\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\049\000\054\000\049\000\000\000\050\000\049\000\
\050\000\000\000\000\000\050\000\000\000\000\000\049\000\049\000\
\000\000\054\000\050\000\050\000\049\000\049\000\000\000\049\000\
\050\000\050\000\055\000\050\000\055\000\000\000\056\000\055\000\
\056\000\000\000\000\000\056\000\000\000\049\000\000\000\000\000\
\000\000\050\000\000\000\000\000\055\000\055\000\000\000\055\000\
\000\000\056\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\056\000\069\000\070\000\071\000\072\000\000\000\000\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\069\000\070\000\071\000\072\000\000\000\000\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\093\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\081\000\000\000\082\000\083\000\
\084\000\069\000\070\000\071\000\072\000\000\000\000\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\069\000\070\000\
\071\000\072\000\000\000\000\000\073\000\074\000\075\000\076\000\
\077\000\078\000\000\000\000\000\000\000\081\000\000\000\082\000\
\083\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\082\000\083\000\084\000\069\000\
\070\000\071\000\072\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\081\000\000\000\082\000\083\000\084\000"

let yycheck = "\035\000\
\000\000\063\000\038\000\039\000\040\000\041\000\009\000\006\001\
\021\001\045\000\001\000\021\001\002\001\035\001\022\001\037\001\
\038\001\039\001\001\001\022\000\003\001\011\001\001\001\022\001\
\002\001\028\000\062\000\063\000\064\000\042\001\066\000\067\000\
\042\001\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\021\001\006\001\021\001\002\001\088\000\004\001\005\001\003\001\
\003\001\008\001\006\001\006\001\003\001\012\001\124\000\004\001\
\006\001\022\001\002\001\002\001\002\001\042\001\021\001\042\001\
\023\001\024\001\008\001\026\001\027\001\002\001\012\001\115\000\
\006\001\001\001\118\000\022\001\001\001\036\001\001\001\021\001\
\124\000\040\001\041\001\042\001\043\001\044\001\002\001\006\001\
\004\001\005\001\003\001\037\001\008\001\025\001\036\001\003\001\
\012\001\003\001\040\001\041\001\042\001\043\001\044\001\003\001\
\114\000\021\001\116\000\023\001\024\001\003\001\026\001\027\001\
\002\001\123\000\004\001\005\001\003\001\127\000\008\001\022\001\
\036\001\022\001\012\001\003\001\040\001\041\001\042\001\043\001\
\044\001\031\000\036\000\021\001\255\255\023\001\024\001\255\255\
\026\001\027\001\002\001\255\255\004\001\005\001\255\255\255\255\
\008\001\255\255\036\001\255\255\012\001\255\255\040\001\041\001\
\042\001\043\001\044\001\255\255\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\002\001\255\255\004\001\009\001\
\010\001\255\255\008\001\255\255\036\001\255\255\012\001\255\255\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\021\001\
\255\255\023\001\024\001\255\255\026\001\027\001\037\001\038\001\
\039\001\035\001\255\255\037\001\038\001\039\001\036\001\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\028\001\029\001\030\001\
\031\001\255\255\033\001\034\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\001\001\035\001\036\001\255\255\038\001\
\039\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\001\001\035\001\255\255\037\001\
\038\001\039\001\007\001\008\001\009\001\010\001\022\001\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\036\001\007\001\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\035\001\003\001\
\037\001\038\001\039\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\035\001\255\255\037\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\003\001\037\001\038\001\039\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\003\001\037\001\038\001\039\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\255\255\037\001\038\001\039\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\035\001\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\008\001\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\022\001\255\255\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\036\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\001\001\022\001\003\001\255\255\001\001\006\001\
\003\001\255\255\255\255\006\001\255\255\255\255\013\001\014\001\
\255\255\036\001\013\001\014\001\019\001\020\001\255\255\022\001\
\019\001\020\001\001\001\022\001\003\001\255\255\001\001\006\001\
\003\001\255\255\255\255\006\001\255\255\036\001\255\255\255\255\
\255\255\036\001\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\020\001\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\255\255\255\255\
\255\255\036\001\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\035\001\036\001\
\037\001\038\001\039\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\037\001\038\001\
\039\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\007\001\008\001\
\009\001\010\001\255\255\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\035\001\255\255\037\001\
\038\001\039\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\037\001\038\001\039\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\038\001\039\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  LBRACK\000\
  RBRACK\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  DEF\000\
  STRING\000\
  POLY\000\
  EXP\000\
  ABS\000\
  COMPO\000\
  EVAL\000\
  CONST_RET\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 45 "polywizparse.mly"
            ( _1 )
# 468 "polywizparse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "polywizparse.mly"
                 ( ([], [])               )
# 474 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 49 "polywizparse.mly"
               ( ((_2 :: fst _1), snd _1) )
# 482 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 50 "polywizparse.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 490 "polywizparse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 54 "polywizparse.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = List.rev _5;
   locals = List.rev _8;
	 body = List.rev _9 } )
# 505 "polywizparse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "polywizparse.mly"
                  ( [] )
# 511 "polywizparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 62 "polywizparse.mly"
                  ( _1 )
# 518 "polywizparse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "polywizparse.mly"
                             ( [(_1,_2)]     )
# 526 "polywizparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "polywizparse.mly"
                             ( (_3,_4) :: _1 )
# 535 "polywizparse.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 69 "polywizparse.mly"
                     ( Array(_1) )
# 542 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "polywizparse.mly"
           ( Int   )
# 548 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "polywizparse.mly"
          ( Bool  )
# 554 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "polywizparse.mly"
          ( Float )
# 560 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "polywizparse.mly"
          ( Void  )
# 566 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "polywizparse.mly"
           ( String )
# 572 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "polywizparse.mly"
         ( Poly )
# 578 "polywizparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "polywizparse.mly"
                     ( [] )
# 584 "polywizparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 79 "polywizparse.mly"
                     ( _2 :: _1 )
# 592 "polywizparse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 82 "polywizparse.mly"
               ( (_1, _2) )
# 600 "polywizparse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "polywizparse.mly"
                   ( [] )
# 606 "polywizparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "polywizparse.mly"
                   ( _2 :: _1 )
# 614 "polywizparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "polywizparse.mly"
                                            ( Expr _1               )
# 621 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 90 "polywizparse.mly"
                                            ( Return _2             )
# 628 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "polywizparse.mly"
                                            ( Block(List.rev _2)    )
# 635 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "polywizparse.mly"
                                            ( If(_3, _5, Block([])) )
# 643 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "polywizparse.mly"
                                            ( If(_3, _5, _7)        )
# 652 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "polywizparse.mly"
                                            ( For(_3, _5, _7, _9)   )
# 662 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "polywizparse.mly"
                                            ( While(_3, _5)         )
# 670 "polywizparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "polywizparse.mly"
                  ( Noexpr )
# 676 "polywizparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "polywizparse.mly"
                  ( _1 )
# 683 "polywizparse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "polywizparse.mly"
  ([])
# 689 "polywizparse.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elements_list) in
    Obj.repr(
# 104 "polywizparse.mly"
                  (List.rev _1)
# 696 "polywizparse.ml"
               : 'element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "polywizparse.mly"
       ([_1])
# 703 "polywizparse.ml"
               : 'elements_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "polywizparse.mly"
                           (_3 :: _1 )
# 711 "polywizparse.ml"
               : 'elements_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'element) in
    Obj.repr(
# 111 "polywizparse.mly"
                         ( ArrayLit(_2) )
# 718 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "polywizparse.mly"
                      ( Literal(_1)            )
# 725 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "polywizparse.mly"
              ( Fliteral(_1)           )
# 732 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 114 "polywizparse.mly"
                     ( BoolLit(_1)            )
# 739 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "polywizparse.mly"
                     ( Sliteral(_1)           )
# 746 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "polywizparse.mly"
                     ( Id(_1)                 )
# 753 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "polywizparse.mly"
                     ( Binop(_1, Add,   _3)   )
# 761 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "polywizparse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 769 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "polywizparse.mly"
                     ( Binop(_1, Mult,  _3)   )
# 777 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "polywizparse.mly"
                     ( Binop(_1, Div,   _3)   )
# 785 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "polywizparse.mly"
                  ( Binop(_1, Exp,   _3)   )
# 793 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "polywizparse.mly"
                    ( Binop(_1, Compo,   _3)   )
# 801 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "polywizparse.mly"
                   ( Unop(Const_ret,   _1)   )
# 808 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "polywizparse.mly"
                   ( Binop(_1, Eval,   _3)   )
# 816 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "polywizparse.mly"
                     ( Binop(_1, Equal, _3)   )
# 824 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "polywizparse.mly"
                     ( Binop(_1, Neq,   _3)   )
# 832 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "polywizparse.mly"
                     ( Binop(_1, Less,  _3)   )
# 840 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "polywizparse.mly"
                     ( Binop(_1, Leq,   _3)   )
# 848 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "polywizparse.mly"
                     ( Binop(_1, Greater, _3) )
# 856 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "polywizparse.mly"
                     ( Binop(_1, Geq,   _3)   )
# 864 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "polywizparse.mly"
                     ( Binop(_1, And,   _3)   )
# 872 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "polywizparse.mly"
                     ( Binop(_1, Or,    _3)   )
# 880 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "polywizparse.mly"
                 ( Unop(Abs, _2)   )
# 887 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "polywizparse.mly"
                         ( Unop(Neg, _2)      )
# 894 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "polywizparse.mly"
                     ( Unop(Not, _2)          )
# 901 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "polywizparse.mly"
                     ( Assign(_1, _3)         )
# 909 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 137 "polywizparse.mly"
                              ( Call(_1, _3)  )
# 917 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "polywizparse.mly"
                       ( _2                   )
# 924 "polywizparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "polywizparse.mly"
                  ( [] )
# 930 "polywizparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 142 "polywizparse.mly"
               ( List.rev _1 )
# 937 "polywizparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "polywizparse.mly"
                            ( [_1] )
# 944 "polywizparse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "polywizparse.mly"
                         ( _3 :: _1 )
# 952 "polywizparse.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
